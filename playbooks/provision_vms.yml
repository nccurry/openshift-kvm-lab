---
- hosts: localhost
  become: no
  gather_facts: no
  vars:
    host_dir: "{{ playbook_dir }}/../.hosts"
    host_image_dir: "{{ playbook_dir }}/../.images"
    user: "{{ lookup('env','USER') }}"
  vars_files:
  - ../vars/environment.yml
  tasks:
  - name: Create image directory
    file:
      state: directory
      path: "{{ host_image_dir }}"

  - name: Check if base host image exists
    stat:
      path: "{{ host_image_dir }}/{{ host_image.name }}"
      checksum_algorithm: sha256
      get_checksum: yes
    register: host_image_stat

  - name: Download host image
    get_url:
      url: "{{ host_image.url }}"
      dest: "{{ host_image_dir }}/{{ host_image.name }}"
      checksum: "sha256:{{ host_image.checksum }}"
      force: yes
    when: not host_image_stat.stat.exists or host_image.checksum != host_image_stat.stat.checksum

  - name: Create directories for hosts
    file:
      state: directory
      path: "{{ host_dir }}/{{ item.key }}"
    with_dict: "{{ nodes }}"

  - name: Generate ssh key
    command: "ssh-keygen -b 2048 -t rsa -f {{ host_dir }}/id_rsa -q -N ''"
    args:
      creates: "{{ host_dir }}/id_rsa"

  - name: Check existing base disks
    stat:
      path: "{{ host_dir }}/{{ item.key }}/{{ item.key }}.qcow2"
    with_dict: "{{ nodes }}"
    register: disk_stats

  - name: Clone base os disks
    copy:
      src: "{{ host_image_dir }}/{{ host_image.name }}"
      dest: "{{ host_dir }}/{{ item.key }}/{{ item.key }}.qcow2"
    with_items: "{{ disk_stats.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"

  - name: Resize base disk
    command: "qemu-img resize {{ host_dir }}/{{ item.key }}/{{ item.key }}.qcow2 {{ host_image.size }}"
    with_items: "{{ disk_stats.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"

  - name: Check existing meta-data files for cloud-init
    stat:
      path: "{{ host_dir }}/{{ item.key }}/meta-data"
    with_dict: "{{ nodes }}"
    register: metadata_stats

  - name: Generate meta-data files for cloud-init
    template:
      src: ../templates/meta-data.j2
      dest: "{{ host_dir }}/{{ item.key }}/meta-data"
    with_items: "{{ metadata_stats.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"

  - name: Check existing user-data files for cloud-init
    stat:
      path: "{{ host_dir }}/{{ item.key }}/user-data"
    with_dict: "{{ nodes }}"
    register: userdata_stats

  - name: Generate user-data files for cloud-init
    vars:
      id_rsa_pub: "{{ lookup('file', '../.hosts/id_rsa.pub') }}"
      id_rsa: "{{ lookup('file', '../.hosts/id_rsa') }}"
    template:
      src: ../templates/user-data.j2
      dest: "{{ host_dir }}/{{ item.key }}/user-data"
    with_items: "{{ userdata_stats.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"

  - name: Check existing cidata.iso files for cloud-init
    stat:
      path: "{{ host_dir }}/{{ item.key }}/cidata.iso"
    with_dict: "{{ nodes }}"
    register: cidataiso_stats

  - name: Generate cloud-init isos
    command: "genisoimage -output {{ host_dir }}/{{ item.key }}/cidata.iso -volid cidata -joliet -rock {{ host_dir }}/{{ item.key }}/user-data {{ host_dir }}/{{ item.key }}/meta-data"
    with_items: "{{ cidataiso_stats.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"

  - name: Check existing network.xml file
    stat:
      path: "{{ host_dir }}/network.xml"
    register: network_stat

  - name: Generate vm network xml
    template:
      src: ../templates/network.xml.j2
      dest: "{{ host_dir }}/network.xml"
    when: not network_stat.stat.exists

  - name: Check to see if network exists
    shell: virsh --connect=qemu:///system net-list
    changed_when: false
    register: net_list

  - name: Create vm network
    block:
    - shell: "virsh --connect=qemu:///system net-define --file {{ host_dir }}/network.xml"
    - shell: "virsh --connect=qemu:///system net-autostart --network {{ network.name }}"
    - shell: "virsh --connect=qemu:///system net-start {{ network.name }}"
    when: not net_list.stdout is search(network.name)

  - name: Check if vms exist
    shell: virsh --connect=qemu:///system list
    changed_when: false
    register: vm_list

  - name: Create vms
    shell: "virt-install --connect qemu:///system --name {{ item.key }} --memory {{ item.value.memory }} --vcpus {{ item.value.cpus }} --import --os-type=linux --os-variant rhel7 --disk {{ host_dir }}/{{ item.key }}/{{ item.key }}.qcow2,format=qcow2,bus=virtio --disk {{ host_dir }}/{{ item.key }}/cidata.iso,device=cdrom --network bridge={{ network.bridge_name }},mac={{ item.value.mac }} --noautoconsole"
    when: not vm_list.stdout is search(item.key)
    with_dict: "{{ nodes }}"

  - name: Check existing vm disks
    stat:
      path: "{{ host_dir }}/{{ item.key }}/{{ item.key }}-disk-{{ item.value.extra_disk_size }}.img"
    with_dict: "{{ nodes }}"
    register: extradisk_stats

  - name: Create disks
    shell: "qemu-img create -f raw {{ host_dir }}/{{ item.key }}/{{ item.key }}-disk-{{ item.value.extra_disk_size }}.img {{ item.value.extra_disk_size }}"
    with_items: "{{ extradisk_stats.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"

  - name: Check mounted disks
    shell: "virsh --connect=qemu:///system domblklist --details --domain {{ item.key }} | grep disk | awk '{ print $3 }'"
    changed_when: false
    register: mounted_disks
    with_dict: "{{ nodes }}"

    # Select results where stdout contains only the default disk 'vda' (as opposed to vda\nvdb)
  - name: Attach disks to vms
    shell: "virsh --connect=qemu:///system attach-disk {{ item.key }} --source {{ host_dir }}/{{ item.key }}/{{ item.key }}-disk-{{ item.value.extra_disk_size }}.img --target vdb --persistent"
    with_items: "{{ mounted_disks.results | selectattr('stdout', 'equalto', 'vda') | map(attribute='item') | list }}" 

- hosts: localhost
  become: yes
  gather_facts: no
  vars_files:
  - ../vars/environment.yml
  tasks:
  - name: Configure /etc/hosts
    blockinfile:
      state: present
      path: /etc/hosts
      block: |
        {{ nodes['ans.lab.local']['ip'] }} ans ans.lab.local
        {{ nodes['mas.lab.local']['ip'] }} mas mas.lab.local
        {{ nodes['inf.lab.local']['ip'] }} inf inf.lab.local
        {{ nodes['app.lab.local']['ip'] }} app app.lab.local
        {{ nodes['mas.lab.local']['ip'] }} ocp.lab.local

- hosts: all
  become: yes
  gather_facts: false
  vars_files:
  - ../vars/environment.yml
  tasks:
  - name: Wait until hosts come up before proceeding
    wait_for_connection:
      sleep: 5
      timeout: 100

  - name: Create network interface configuration 
    template:
      src: "{{ playbook_dir }}/../templates/ifcfg-eth0.j2"
      dest: /etc/sysconfig/network-scripts/ifcfg-eth0
      force: yes
      owner: root
      group: root
      mode: 0644

  - name: Install NetworkManager
    yum:
      name: NetworkManager
      state: present

  - name: Start and enable NetworkManager
    systemd:
      name: NetworkManager
      state: started
      enabled: yes

  # - name: Wierd hack to get NetworkManager to load configuration
  #   command: 'nmcli con up "System eth0"'
  #   ignore_errors: yes
  - name: Restart Network Manager
    systemd:
      name: NetworkManager
      state: restarted